import mylib2399
import pickle
from createGreek7 import *
import time

"""

Παπαδοπούλου Κωνσταντίνα (Α.Ε.Μ.: 2399)

Τα αρχεία που περιλαμβάνει αυτή η εργασία είναι τα εξής:
1)greek7.pkl, το οποίο περιέχει τις λέξεις που χρησιμοποιεί το παιχνίδι μαζί με τον βαθμό της κάθε λέξης καταχωρημένες με την μορφή λεξικού.
  Χρησιμοποιείται αυτή η δομή, γιατί κάνει τον κώδικα πιο αποδοτικό, καθώς εκτελείται γρηγορότερα. Το αρχείο greek7.pkl προκύπτει από το αρχείο
  greek7.txt, το οποίο είναι το αρχείο με τις λέξεις μέχρι και 7 γράμματα που δημιουργείται με βάση το αρχείο greek.txt, που περιλαμβάνει όλες τις λέξεις ανεξαρτήτως
  μήκους. Η δομή αυτή "φορτώνεται" από το πρόγραμμα κάθε φορά που αναζητούμε το βαθμό μιας λέξης.
2)createGreek7.py, το οποίο δημιουργεί τα αρχεία greek7.txt και greek7.pkl. Το αρχείο αυτό καλείται μέσω του αρχείου main2399.py.
3)mylib2399.py
    Το αρχείο αυτό αποτελεί βιβλιοθήκη του προγράμματος, όπου βρίσκονται οι κλάσσεις που χρησιμοποιεί το πρόγραμμα. Στην βιβλιοθήκη mylib2399.py, λοιπόν,
    περιλαμβάνονται:
    α)Η κλάση SakClass, η οποία περιέχει τις μεθόδους που χρησιμοποιούνται για να υλοποιηθεί το "σακουλάκι" του φυσικού παιχνιδιού καθώς και οι βασικές
      λειτουργίες του.
      Οι ιδιότητες της κλάσης αυτής είναι:
      ->Το λεξικό lets, με κλειδί τον χαρακτήρα του κάθε γράμματος και με τιμή μια λίστα με δύο ακεραίους:
        ο πρώτος ακέραιος δείχνει το πόσα γράμματα υπάρχουν ενώ ο δεύτερος ακέραιος δείχνει τους βαθμούς του γράμματος στο παιχνίδι.
      ->Την λίστα letlist, η οποία είναι η λίστα με τους χαρακτήρες (γράμματα) σε τυχαία σειρά ώστε να είναι εύκολη η επιλογή τους για το παιχνίδι.
        Η letlist προσομοιώνει τα γράμματα που υπάρχουν κάθε στιγμή στο "σακουλάκι" του παιχνιδιού.
      Οι μέθοδοι της κλάσης SakClass είναι οι εξής:
      ->Μέθοδος κατασκευαστής όπου γίνεται η αρχικοποίηση των παραπάνω ιδιοτήτων και εκτελείται η randomize_sak που παρουσιάζεται παρακάτω.
      ->randomize_sak: δημιουργεί τη λίστα letlist με τα γράμματα, δηλαδή (α) τοποθετεί στη letlist τα γράμματα τόσες φορές όσες πρέπει,
        και (β) τυχαιοποιεί τη θέση των γραμμάτων στη λίστα letlist.
      ->getletters: δίνει στον παίκτη Ν γράμματα από το "σακουλάκι" με τυχαίο τρόπο, όταν ζητηθούν στη διάρκεια του παιχνιδιού.
      ->putbackletters: επιστρέφει τα γράμματα του παίκτη στο "σακουλάκι".
      ->remainedletters: επιστρέφει τον αριθμό των γραμμάτων που έχουν μείνει στο "σακουλάκι".
      ->completeLets: συμπληρώνει τα γράμματα του Η/Υ και του παίκτη κάθε φορά που σχηματίζουν μία λέξη, έτσι ώστε να είναι πάντα 7.
      ->showAvLets: εμφανίζει τα διαθέσιμα γράμματα του Η/Υ ή του παίκτη.
    β)Η κλάση PlayersGame, η οποία περιλαμβάνει κάποια στοιχεία απαραίτητα για την εξέλιξη του παιχνιδιού.
      Η κλάση αυτή περιλαμβάνει την ιδιότητα:
      ->score: αναπαριστά το σκορ του Η/Υ και του παίκτη.
      Οι μέθοδοι της κλάσης αυτής είναι οι εξής:
      ->Μέθοδος κατασκευαστής όπου γίνεται η αρχικοποίηση της παραπάνω ιδιότητας.
      ->checkWord: ελέγχει εάν η λέξη που δίνεται από τον Η/Υ ή τον παίκτη αποτελείται από γράμματα που όντως διαθέτουν και εάν ναι, τότε να ελέγχει
        αν η λέξη που δόθηκε περιλαμβάνεται στον κατάλογο αποδεκτών λέξεων που έχει προκύψει από το αρχείο greek7.txt.
      ->getScores: εμφανίζει τα τελικά σκορ του παίκτη και του Η/Υ.
    γ)Η κλάση PCGameAlgor, η οποία υλοποιεί τους αλγορίθμους που χρησιμοποιεί ο Η/Υ όταν παίζει.
      Η κλάση αυτή περιλαμβάνει την ιδιότητα:
      ->choice: αναπαριστά την επιλογή που κάνει ο παίκτης όσον αφορά το ποιόν αλγόριθμο θα ακολουθήσει ο Η/Υ. Εάν ο παίκτης δεν επιλέξει κάποιον αλγόριθμο,
        τότε, κατά την εκκίνηση της εφαρμογής, χρησιμοποιείται σαν προκαθορισμένος (default) ο αλγόριθμος SmartLetters. Αν ο παίκτης ολοκληρώσει ένα παιχνίδι και
        ξεκινήσει αμέσως ένα νεό, τότε ο Η/Υ ακολουθεί τον αλγόριθμο που χρησιμοποίησε και στο προηγούμενο παιχνίδι.
      Οι μέθοδοι της κλάσης PCGameAlgor είναι οι εξής:
      ->Μέθοδος κατασκευαστής, η οποία δέχεται ως όρισμα την επιλογή του αλγορίθμου που θα χρησιμοποιήσει ο Η/Υ και αρχικοποιεί την παραπάνω ιδιοτήτα με την
        επιλογή αυτή.
      ->minLetters: δημιουργεί όλες τις δυνατές μεταθέσεις (permutations) των γραμμάτων που διαθέτει ο Η/Υ ξεκινώντας από 2 και ανεβαίνοντας μέχρι τα 7 γράμματα.
        Για κάθε μετάθεση ελέγχει αν είναι αποδεκτή λέξη και παίζει την πρώτη αποδεκτή λέξη που θα εντοπίσει, δηλαδή αυτή με τα λιγότερα γράμματα.
      ->maxLetters: δημιουργεί όλες τις δυνατές μεταθέσεις (permutations) των γραμμάτων που διαθέτει ο Η/Υ ξεκινώντας από τις μεταθέσεις των γραμμάτων
        ανά 7 και κατεβαίνει προς το 2. Παίζει πάλι την πρώτη αποδεκτή λέξη, αλλά τώρα αυτή με τα περισσότερα γράμματα.
      ->smartLetters: εξαντλεί όλες τις μεταθέσεις 2 ως και 7 γραμμάτων (από τα γράμματα που διαθέτει ο Η/Υ) χωρίς να σταματά.
        Βρίσκει τις αποδεκτές λέξεις και στο τέλος παίζει τη λέξη που δίνει τους περισσότερους βαθμούς.
      Επιπλέον, οι κλάσεις minLetters, maxLetters και smartLetters εμφανίζουν την λέξη που έπαιξε ο Η/Υ μαζί με τον βαθμό της και το συνολικό σκορ του Η/Υ,
      και καλούν την completeLets για να συμπληρωθούν τα διαθέσιμα γράμματα του.
4)scores_history.pkl το οποίο κάθε φορά που τελειώνει ένα παιχνίδι καταχωρεί σε μία λίστα τα στοιχεία του παιχνιδιου πού κρίνονται σημαντικα
  (την ημερομηνία και την ώρα που παίχτηκε το παιχνίδι, τον νικητή, το τελικό σκορ του Η/Υ και του παίκτη, τον αλγόριθμο που χρησιμοποίησε ο Η/Υ,
  τον αριθμό των κινήσεων και αναλυτικά τα σκορ του Η/Υ και του παίκτη μετά απο κάθε γύρο). Τη δομή αυτή το πρόγραμμα την "φορτώνει" όταν ξεκινά το παιχνίδι
  και μπορεί να δίνει στον παίκτη σχετική ενημέρωση για τα προηγούμενα παιχνίδια, εάν ο παίκτης επιλέξει την επιλογή  "1" ( Σκορ ) από το αρχικό μενού.
  Ως κίνηση, θεωρούμε όταν ο παίκτης δίνει μια ΑΠΟΔΕΚΤΗ λέξη, όταν δίνει "p" και όταν συμπληρώνει τα διαθέσιμα γράμματά του.
5)main2399.py, το οποίο περιλαμβάνει το κύριο πρόγραμμα το οποίο είναι εκτελέσιμο.
  Το αρχείο αυτό περιλαμβάνει:
  ->την συνάρτηση score, η οποία σημιουργεί το αρχείο "scores_history.pkl", όπου βρίσκεται το ιστορικό των παιχνιδιών,
  ->την συνάρτηση playerPlay, όπου βρίσκεται ο αλγόριθμος του παίκτη,
  ->την συνάρτηση pcPlay, απ' όπου καλείται ο αλγόριθμος του Η/Υ, και
  ->τον κύριο κώδικα με τον οποίο ξεκινάει η εφαρμογή.

Παρακατω παρουσιάζονται μερικά παραδείγματα εκτέλεσης του κώδικα.
Πρώτα εμφανίζεται το αρχικό μενού:

***** SCRABBLE *****
--------------------
1: Σκορ
2: Ρυθμίσεις
3: Παιχνίδι
q: Έξοδος
--------------------

Πληκτρολόγησε την επιλογή που επιθυμείς: 

->Εάν πληκτρολογησούμε "1", τότε το πρόγραμμα φορτώνει την δομή "scores_history.pkl" και εμφανίζει το ιστορικό των παιχνιδιών που έχουν παιχτεί.
  Συγκεκριμένα εμφανίζονται η ημερομηνία και η ώρα που παίχτηκε το κάθε παιχνίδι, o νικητής, το τελικό σκορ του Η/Υ και του παίκτη, ο αλγόριθμος που χρησιμοποίησε
  ο Η/Υ, ο αριθμός των κινήσεων και αναλυτικά τα σκορ του Η/Υ και του παίκτη μετά απο κάθε γύρο. Ως κίνηση, θεωρούμε όταν ο παίκτης δίνει μια ΑΠΟΔΕΚΤΗ λέξη,
  όταν δίνει "p" και όταν συμπληρώνει τα διαθέσιμα γράμματά του. Ένα παράδειγμα φαίνεται παρακάτω:
  
  -------------------------
  ********  ΣΚΟΡ  ********
  -------------------------
  Παιχνίδι  13/09/2017  
  Ώρα παιχνιδιού: 17:19:31
  -------------------------
  Νικητής: ο Η/Υ!

  To σκορ σου: 10
  Το σκορ του Η/Υ: 34
  -------------------------
  Αλγόριθμος Η/Υ: SmartLetters
  -------------------------


  -------------------------
  Πλήθος Κινήσεων: 6
  -------------------------

  * ΓΥΡΟΣ 1:

  Το σκορ σου: 6
  Το σκορ του Η/Υ: 16
  -------------------------
  * ΓΥΡΟΣ 2:

  Το σκορ σου: 6
  Το σκορ του Η/Υ: 22
  -------------------------
  * ΓΥΡΟΣ 3:

  Το σκορ σου: 10
  Το σκορ του Η/Υ: 34
  -------------------------
  * ΓΥΡΟΣ 4:

  Το σκορ σου: 10
  Το σκορ του Η/Υ: 34
  -------------------------


  
->Εάν πληκτρολογήσουμε "2", τότε εμφανίζεται το παρακάτω μενού:
  -----------------------
  *****  ΡΥΘΜΙΣΕΙΣ  *****
  -----------------------
  1: MIN Letters
  2: MAX Letters
  3: SMART Letters
  -----------------------
  Πληκτρολόγησε τον αριθμό του αλγορίθμου του Η/Υ που επιθυμείς: 

  ->Στο σημείο αυτό επιλέγουμε τον αλγόριθμο τον οποίο θέλουμε να χρησιμοποιήσει ο Η/Υ στο παιχνίδι.

->Εάν επιλέξουμε "3", τότε ξεκινάει ένα νέο παιχνίδι.
  Αρχικά, το πρόγραμμα κληρώνει 7 γράμματα από το "σακουλάκι" για τον παίκτη και 7 για τον Η/Υ. Παρουσιάζει στον παίκτη τα γράμματά του μαζί με την αξία τους
  (η αξία είναι ένας ακέραιος αριθμός που εμφανίζεται δίπλα στο γράμμα). Ταυτόχρονα το πρόγραμμα αφαιρεί από το "σακουλάκι" τα γράμματα που κληρώθηκαν.
  Επίσης εμφανίζεται στο παίκτη η πληροφορία για το πόσα γράμματα παραμένουν στο "σακουλάκι". Το πρόγραμμα στη συνέχεια περιμένει τον παίκτη να πληκτρολογήσει
  μια λέξη με τα γράμματα που διαθέτει. Όταν ο παίκτης πληκτρολογήσει μια λέξη τότε το πρόγραμμά κάνει 2 ελέγχους:
  (α) Ελέγχει αν η λέξη αποτελείται από γράμματα που όντως διαθέτει ο παίκτης και αν όχι, εμφανίζει ένα σχετικό μήνυμα και περιμένει νέα λέξη.
  (β) Αν ναι, τότε ελέγχει αν η λέξη που δόθηκε περιλαμβάνεται στον κατάλογο αποδεκτών λέξεων greek7.pkl. Ως αποδεκτές θεωρούμε τις λέξεις που αποτελούνται
      από 2 μέχρι και 7 γράμματα.
  Σε περίπτωση που ο παίκτης δεν βρίσκει λέξη με τα γράμματα που διαθέτει μπορεί να πληκτρολογήσει "p" (δηλαδή pass) οπότε το πρόγραμμα θα πρέπει:
  (α) να επιστρέψει τα διαθέσιμα γράμματα στο "σακουλάκι" και
  (β) να κληρώσει νέα γράμματα για τον παίκτη.
  Αν η λέξη είναι αποδεκτή, τότε το πρόγραμμα υπολογίζει τους πόντους της λέξης και εμφανίζει στον παίκτη το νέο του σκορ, μαζί με την προτροπή
  "Enter για συνέχεια".
  Εφόσον δοθεί "Enter" (ή "p") από τον παίκτη, στη συνέχεια το πρόγραμμα:
  (α) Συμπληρώνει με νέα γράμματα τα διαθέσιμα του παίκτη (ώστε να είναι πάντοτε 7 και ταυτόχρονα τα αφαιρεί από το "σακουλάκι").
  (β) Εμφανίζει τα γράμματα του Η/Υ και την λέξη που παίζει, μαζί με τη βαθμολογία της λέξης και το συνολικό σκορ του Η/Υ.
      Έπειτα, συμπληρώνει κρυφά τα γράμματα του Η/Υ.
  Το παιχνίδι συνεχίζεται έτσι μέχρις ότου συμβεί κάτι από τα παρακάτω:
  (α) Ο παίκτης επιθυμεί να σταματήσει οπότε εισάγει τον χαρακτήρα "q" (δηλαδή quit) όταν είναι η σειρά του να πληκτρολογήσει λέξη ή δεν βρίσκει
      αποδεκτή λέξη να παίξει και δεν υπάρχουν γράμματα στο "σακουλάκι" για να αλλάξει.
  (β) Δεν υπάρχουν πλέον γράμματα αρκετά στο "σακουλάκι" ώστε να αντικατασταθούν όσα λείπουν, είτε του παίκτη είτε του Η/Υ.
  (γ) Ο Η/Υ δεν βρίσκει κάποια αποδεκτή λέξη να παίξει.
  Σε οποιαδήποτε από τις παραπάνω περιπτώσεις το πρόγραμμα σταματά και:
  (α) Ανακοινώνει τις βαθμολογίες παίκτη και Η/Υ ανακηρύσσοντας τον νικητή.
  (β) Αποθηκεύει στο αρχείο "scores_history.pkl" μια νέα καταχώρηση με μορφή λίστας, η οποία περιέχει ορισμένα στοιχεία του παιχνιδιού που κρίνονται σημαντικά
      (την ημερομηνία και την ώρα που παίχτηκε το παιχνίδι, τον νικητή, το τελικό σκορ του Η/Υ και του παίκτη, τον αλγόριθμο που χρησιμοποίησε ο Η/Υ, τον αριθμό των
      κινήσεων και αναλυτικά τα σκορ του Η/Υ και του παίκτη μετά απο κάθε γύρο). Όπως σημειώθηκε και παραπάνω, ως κίνηση θεωρούμε όταν ο παίκτης δίνει μια
      ΑΠΟΔΕΚΤΗ λέξη, όταν δίνει "p" και όταν συμπληρώνει τα διαθέσιμα γράμματά του.
  Παρακάτω φαίνεται ένα παράδειγμα ενός παιχνιδιού.
  --------------------
  ***** ΠΑΙΧΝΙΔΙ *****
  --------------------
  Γράμματα στο σακουλάκι: 88 - Παίζεις:
  Διαθέσιμα γράμματα: Ο,1 - Κ,2 - Ι,1 - Σ,1 - Κ,2 - Ν,1 - Υ,2


  ->Αν δεν βρίσκεις λέξη και θέλεις να συνεχίσει το παιχνίδι, πάτησε "p".
  ->Αν θέλεις να σταματήσεις πάτησε "q".

  Λεξη:ΣΟΚ
  Αποδεκτή λέξη! :-)
  Βαθμοί:  4 - Σκορ:  4
  Enter για Συνέχεια
  --------------------------------------------------

  Διαθέσιμα γράμματα: Ι,1 - Κ,2 - Ν,1 - Υ,2 - Τ,1 - Ε,1 - Ω,3

  --------------------------------------------------

  Γράμματα στο σακουλάκι: 85 - Παίζει ο Η/Υ:

  Γράμματα Η/Υ: Ι,1 - Γ,4 - Ι,1 - Ο,1 - Τ,1 - Ρ,2 - Φ,8
  Τρέχων αλγόριθμος: SmartLetters
  Λέξη Η/Υ:  ΓΡΙΦΟΙ , Βαθμοί:  17 - Σκορ Η/Υ:  17


  --------------------------------------------------
  Γράμματα στο σακουλάκι: 79 - Παίζεις:
  Διαθέσιμα γράμματα: Ι,1 - Κ,2 - Ν,1 - Υ,2 - Τ,1 - Ε,1 - Ω,3


  ->Αν δεν βρίσκεις λέξη και θέλεις να συνεχίσει το παιχνίδι, πάτησε "p".
  ->Αν θέλεις να σταματήσεις πάτησε "q".

  Λεξη:p


  --------------------------------------------------

  Διαθέσιμα γράμματα: Ο,1 - Γ,4 - Λ,3 - Η,1 - Α,1 - Ζ,10 - Σ,1

  --------------------------------------------------

  Γράμματα στο σακουλάκι: 79 - Παίζει ο Η/Υ:
 
  Γράμματα Η/Υ: Τ,1 - Ο,1 - Σ,1 - Α,1 - Η,1 - Α,1 - Ν,1
  Τρέχων αλγόριθμος: SmartLetters
  Λέξη Η/Υ:  ΣΟΝΑΤΑ , Βαθμοί:  6 - Σκορ Η/Υ:  23


  --------------------------------------------------
  Γράμματα στο σακουλάκι: 73 - Παίζεις:
  Διαθέσιμα γράμματα: Ο,1 - Γ,4 - Λ,3 - Η,1 - Α,1 - Ζ,10 - Σ,1


  ->Αν δεν βρίσκεις λέξη και θέλεις να συνεχίσει το παιχνίδι, πάτησε "p".
  ->Αν θέλεις να σταματήσεις πάτησε "q".

  Λεξη:q


  --------------------------------------------------
  Επέλεξες τον τερματισμό του παιχνιδιού.
  ΤΕΛΟΣ ΠΑΙΧΝΙΔΙΟΥ!
  --------------------------------------------------

  -Το τελικό σου σκορ:  4

  -Το τελικό σκορ του Η/Υ:  23

  ΝΙΚΗΤΗΣ: Η/Υ
  ΔΥΣΤΥΧΩΣ ΕΧΑΣΕΣ! ΑΝ ΘΕΣ ΜΠΟΡΕΙΣ ΝΑ ΠΑΙΞΕΙΣ ΞΑΝΑ!

  ----------------------------------------------------------------------
  ----------------------------------------------------------------------


->Εάν επιλέξουμε (δηλαδή, πληκτρολογήσουμε) το "q", τότε γίνεται η έξοδος από την εφαρμογή.
Κατά την διάρκεια εκτέλεσης της εφαρμογής και της εξέλιξης του παιχνιδιου, και για οποιοδήποτε "πρόβλημα" υπάρξει(π.χ. δεν έχουν μείνει αρκετά γράμματα στο
"σακουλακι"), εμφανίζονται τα κατάλληλα μηνύματα στην οθόνη.

"""



#----------------------Executable file--------------------------------------
def score(player, pc, winner, scores,moves,algorithm):
    details = []
    details.append('Παιχνίδι  '+time.strftime("%d/%m/%Y  "))
    details.append('Ώρα παιχνιδιού: '+time.strftime("%H:%M:%S"))
    details.append('-'*25)
    if winner == 1:
        details.append('Νικητής: Εσύ!')
    elif winner == 2:
        details.append('Νικητής: ο Η/Υ!')
    else:
        details.append('Ισοπαλία!')
    details.append('\nTo σκορ σου: ' + str(player.score))
    details.append('Το σκορ του Η/Υ: '+ str(pc.score))
    details.append('-'*25)
    if algorithm == '1':
        details.append('Αλγόριθμος Η/Υ: MinLetters')
    elif algorithm == '2':
        details.append('Αλγόριθμος Η/Υ: MaxLetters')
    else:
        details.append('Αλγόριθμος Η/Υ: SmartLetters')
    details.append('-'*25)
    details.append('\n')
    details.append('-'*25)
    details.append('Πλήθος Κινήσεων: ' + str(moves))
    details.append('-'*25+'\n')
    for s in scores:
        counter = 0
        details.append('* ΓΥΡΟΣ '+str(s)+':\n')
        for i in scores[s]:
            if counter == 0:
                details.append('Το σκορ σου: ' + str(i))
                counter += 1
            else:
                details.append('Το σκορ του Η/Υ: ' + str(i))
        details.append('-'*25)
    details.append('\n\n')
    with open('scores_history.pkl','ab') as scorespkl:
        pickle.dump(details,scorespkl)
            
def playerPlay(endIt,sak,player,getletsPl,degreeDict,moves):
    remained = SakClass.remainedletters(sak)
    print('Γράμματα στο σακουλάκι:',remained,'- Παίζεις:')
    print('Διαθέσιμα γράμματα: ',end='')
    SakClass.showAvLets(sak,getletsPl)
    print('\n')
    tag = 0
    while (tag != 2):
        print('\n->Αν δεν βρίσκεις λέξη και θέλεις να συνεχίσει το παιχνίδι, πάτησε "p".')
        print('->Αν θέλεις να σταματήσεις πάτησε "q".')
        word=input('\nΛεξη:')
        if word == '':
            print('\nΠρέπει να γράψεις μια λέξη..')
        elif word == 'q':
            endIt = 1
            print('\n')
            print('-'*50)
            print('Επέλεξες τον τερματισμό του παιχνιδιού.\nΤΕΛΟΣ ΠΑΙΧΝΙΔΙΟΥ!')
            print('-'*50)
            break
        elif word!='p':
            tag = player.checkWord(word,getletsPl)
            if tag == 1:
                print('\nΣχημάτισε λέξεις μόνο με τα γράμματα που έχεις διαθέσιμα!')
                print(getletsPl)
            elif tag == 2:
                moves += 1
                print('Αποδεκτή λέξη! :-)')
                player.score += degreeDict[word]
                print('Βαθμοί: ',degreeDict[word],'- Σκορ: ',player.score)
                enter = input('Enter για Συνέχεια')
                print('-'*50)
                remained = SakClass.remainedletters(sak)
                if remained>=7:
                    getletsPl = SakClass.completeLets(sak,getletsPl,word)
                    moves += 1
                    print('\nΔιαθέσιμα γράμματα: ',end='')
                    SakClass.showAvLets(sak,getletsPl)
                    print('\n')
                    print('-'*50)
                else:
                    print('\nΓράμματα στο σακουλάκι:',remained)
                    print('\nΤο σακουλάκι δεν έχει αρκετά γράμματα.\nΤέλος Παιχνιδιού!')
                    print('\n')
                    print('-'*50)
                    endIt = 1
            elif tag == 3:
                print('Δεν υπάρχει αυτή η λέξη!:-( Προσπάθησε ξανά!')
        elif word == 'p':
            moves += 1
            remained = SakClass.remainedletters(sak)
            if remained>=7:
                SakClass.putbackletters(sak,getletsPl)
                getletsPl = SakClass.getletters(sak,7)
                moves += 1
                print('\n')
                print('-'*50)
                print('\nΔιαθέσιμα γράμματα: ',end='')
                SakClass.showAvLets(sak,getletsPl)
                print('\n')
                print('-'*50)
            else:
                print('\nΓράμματα στο σακουλάκι:',remained)
                print('\nΤο σακουλάκι δεν έχει αρκετά γράμματα.\nΤΕΛΟΣ ΠΑΙΧΝΙΔΙΟΥ!')
                print('\n')
                print('-'*50)
                endIt = 1
            break
    return endIt,sak,player,getletsPl,moves

def pcPlay(endIt,sak,pc,getletsPc,algor):
    remained = SakClass.remainedletters(sak)
    print('\nΓράμματα στο σακουλάκι:',remained,'- Παίζει ο Η/Υ:')
    print('\nΓράμματα Η/Υ: ',end='')
    SakClass.showAvLets(sak,getletsPc)
    if algor.choice == '1':
        print('\nΤρέχων αλγόριθμος: MinLetters')
        found,endIt,getletsPc = PCGameAlgor.minLetters(algor,pc,getletsPc,sak)
    elif algor.choice == '2':
        print('\nΤρέχων αλγόριθμος: MaxLetters')
        found,endIt,getletsPc = PCGameAlgor.maxLetters(algor,pc,getletsPc,sak)
    else:
        print('\nΤρέχων αλγόριθμος: SmartLetters')
        found,endIt,getletsPc = PCGameAlgor.smartLetters(algor,pc,getletsPc,sak)
    return found,endIt,sak,pc,getletsPc
            
#------------------------------main--------------------------------------------
createGreek7()
algor = PCGameAlgor('3')    #Default PC Algorithm
back =1
while (back == 1):
    scores = {}
    print('*'*5,'SCRABBLE','*'*5)
    print('-'*20)
    print('1: Σκορ\n2: Ρυθμίσεις\n3: Παιχνίδι\nq: Έξοδος')
    print('-'*20)

    num = input('\nΠληκτρολόγησε την επιλογή που επιθυμείς: ')
    print('\n')
    temp = 0
    while temp == 0:
        if num == '1':
            temp = 1
            back = 1
            print('-'*25)
            print('*'*8,' ΣΚΟΡ ','*'*8)
            print('-'*25)
            details = []
            with open('scores_history.pkl','rb') as scorespkl:
                while True:
                    try:
                        details = pickle.load(scorespkl)
                        for item in details:
                           print (item)
                    except EOFError:
                        break
        elif num == '2':
            temp = 1
            back = 1
            print('-'*23)
            print('*'*5,' ΡΥΘΜΙΣΕΙΣ ','*'*5)
            print('-'*23)
            print('1: MIN Letters\n2: MAX Letters\n3: SMART Letters')
            print('-'*23)
            choice = input('Πληκτρολόγησε τον αριθμό του αλγορίθμου του Η/Υ που επιθυμείς: ')
            while (choice != '1' and choice != '2' and choice != '3'):
                choice = input('\nΠληκτρολόγησε τον αριθμό μίας από τις παραπάνω υπάρχουσες επιλογές: ')
                print('\n')
            algor.choice = choice
        elif num == '3':
            sak = mylib2399.SakClass()
            player = PlayersGame()
            pc = PlayersGame()
            helper = PlayersGame()  #Helper-instance
            rounds = 0
            moves = 0
            scores = {}
            print('-'*20)
            print('*'*5,'ΠΑΙΧΝΙΔΙ','*'*5)
            print('-'*20)
            temp =1
            back = 1
            with open('greek7.pkl','rb') as g7pkl:
                degreeDict = pickle.load(g7pkl)
            SakClass.randomize_sak(sak)
            getletsPl = SakClass.getletters(sak,7)
            getletsPc = SakClass.getletters(sak,7)
            endIt = 0
            while (endIt != 1):
                endIt,sak,player,getletsPl,moves = playerPlay(endIt,sak,player,getletsPl,degreeDict,moves)
                if endIt != 1:
                    found,endIt,sak,pc,getletsPc = pcPlay(endIt,sak,pc,getletsPc,algor)
                    print('-'*50)
                rounds += 1
                scores[rounds] = []
                scores[rounds].append(player.score)
                scores[rounds].append(pc.score)  
            if endIt == 1:
                helper.getScores(player,pc)
                if player.score > pc.score:
                    winner = 1
                    print('\nΣΥΓΧΑΡΗΤΗΡΙΑ!!! ΝΙΚΗΣΕΣ!!!\n')
                elif player.score < pc.score:
                    winner = 2
                    print('\nΝΙΚΗΤΗΣ: Η/Υ\nΔΥΣΤΥΧΩΣ ΕΧΑΣΕΣ! ΑΝ ΘΕΣ ΜΠΟΡΕΙΣ ΝΑ ΠΑΙΞΕΙΣ ΞΑΝΑ!\n')
                else:
                    winner = 0
                    print('ΙΣΟΠΑΛΙΑ!!!\nΑΝ ΘΕΣ ΜΠΟΡΕΙΣ ΝΑ ΠΑΙΞΕΙΣ ΞΑΝΑ!\n')
                score(player,pc,winner,scores,moves,algor.choice)    
        elif num == 'q':
            temp = 1
            back = 0
            print('-'*70)
            print('*'*30,' ΕΞΟΔΟΣ ','*'*30)
            print('-'*70)
            print('\n\n')
        else:
            temp = 0
            num = input('Πληκτρολόγησε μία από τις παραπάνω υπάρχουσες επιλογές: ')
    print('-'*70)
    print('-'*70)
    print('\n\n')

